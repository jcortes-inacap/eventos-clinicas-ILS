---
import PreviewButton from './preview-button.astro'
import PreviewDevices from './preview-devices.astro'
import { generatePreviewId, createIframeContent } from './utils'
import type { HTMLAttributes } from 'astro/types'

export interface Props {
  title: string
  height?: string
  bgColor?: boolean
  component: string
  htmlCode: string
  cssCode?: string
  jsCode?: string
  disableModal?: boolean
  disableEditMode?: boolean
  disableDownload?: boolean
  iframeSrc?: string
}

const {
  title,
  height = 'auto',
  bgColor = false,
  component,
  htmlCode,
  cssCode,
  jsCode,
  disableModal = false,
  disableEditMode = false,
  disableDownload = false,
  iframeSrc = ''
} = Astro.props

const previewId = generatePreviewId()
const isDev = import.meta.env.DEV

const iframeContent = !iframeSrc
  ? createIframeContent({
      bgColor,
      component,
      cssCode,
      jsCode,
      isDev
    })
  : ''

// Define tabs configuration
const tabs = [
  {
    id: 'html',
    label: 'HTML',
    active: true
  },
  ...(cssCode ? [{ id: 'css', label: 'CSS', active: false }] : []),
  ...(jsCode ? [{ id: 'js', label: 'JavaScript', active: false }] : [])
]

// Define button attributes type
type TabButtonAttributes = HTMLAttributes<'button'> & {
  'data-lang': string
  'data-bs-toggle': string
  'data-bs-target': string
}

// bgColor is used to set the background color of the preview container
const backgroundColor = bgColor ? 'var(--content-wrapper-bg)' : 'transparent'
---

<div
  class="card border p-0 mb-4 preview-box"
  data-toc-skip
  data-bg-color={bgColor.toString()}
  {...iframeSrc && { 'data-external-src': iframeSrc }}
>
  <div class="card-header p-3 border-bottom d-grid" style="grid-template-columns: 1fr auto 1fr;">
    <span class="card-title fs-6 mb-0 d-flex align-items-center">{title}</span>

    <div class="d-flex justify-content-center">
      <PreviewDevices />
    </div>

    <div class="d-flex justify-content-end align-items-center">
      {
        !disableModal && (
          <PreviewButton
            icon="ri-fullscreen-line fs-5"
            title="Expand Preview"
            className="mx-2 preview-expand"
            dataTarget={`#${previewId}`}
            extraAttributes={{ 'data-bs-toggle': 'modal' }}
          />
        )
      }
      <PreviewButton
        icon="ri-sun-line"
        title="Toggle Theme"
        className="theme-toggle"
        extraAttributes={{ 'data-current-theme': 'light' }}
      />
    </div>
  </div>

  <div class="card-body" style={`background-color: ${backgroundColor};`} data-bs-theme="">
    <div
      class="preview-container position-relative"
      style={`width: 100%; transition: width 0.3s ease; height: ${height}; overflow: hidden;`}
    >
      <div class="iframe-loader">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <iframe
        id={`iframe-${previewId}`}
        class="preview-iframe"
        style="width: 100%; height: 100%; border: none;"
        {...iframeSrc ? { src: iframeSrc } : { srcdoc: iframeContent }}
        title={title}></iframe>
    </div>
    <div class="preview-update-container d-none" role="alert" aria-live="polite"></div>
  </div>

  <div class="card-footer p-0">
    <div class="code-preview-box">
      <div class="d-flex align-items-center justify-content-between bg-body-tertiary">
        <nav class="code-preview-nav d-flex" role="tablist">
          {
            tabs.map((tab) => {
              const attributes: TabButtonAttributes = {
                class: `nav-link py-2 px-2 ${tab.active ? 'active' : ''}`,
                id: `${tab.id}-tab`,
                'data-lang': tab.id,
                'data-bs-toggle': 'tab',
                'data-bs-target': `#${previewId}-${tab.id}`,
                type: 'button',
                role: 'tab',
                'aria-selected': tab.active ? 'true' : 'false'
              }

              return <button {...attributes}>{tab.label}</button>
            })
          }
        </nav>

        <div class="d-flex gap-2 me-3">
          {
            !disableEditMode && (
              <>
                <PreviewButton
                  icon="ri-restart-line"
                  title="Reset all changes"
                  className="reset-all-button p-3 lh-0"
                  ariaLabel="Reset all changes"
                  extraAttributes={{ 'data-bs-toggle': 'tooltip', 'data-bs-placement': 'top' }}
                />
                <PreviewButton
                  icon="ri-edit-line"
                  title="Edit code"
                  className="edit-button p-3 lh-0"
                  ariaLabel="Edit code"
                  extraAttributes={{ 'data-bs-toggle': 'tooltip', 'data-bs-placement': 'top' }}
                />
              </>
            )
          }
          <PreviewButton
            icon="ri-clipboard-line"
            title="Copy current code"
            className="copy-button p-3 lh-0"
            ariaLabel="Copy code to clipboard"
            extraAttributes={{ 'data-bs-toggle': 'tooltip', 'data-bs-placement': 'top' }}
          />
          {
            !disableDownload && (
              <div class="dropdown">
                <PreviewButton
                  icon="ri-download-line"
                  title="Download code"
                  className="download-dropdown-button p-3 lh-0"
                  ariaLabel="Download code"
                  extraAttributes={{
                    'data-bs-toggle': 'dropdown',
                    'aria-expanded': 'false'
                  }}
                />
                <ul class="dropdown-menu dropdown-menu-end">
                  <li>
                    <button class="dropdown-item download-button" data-format="html" type="button">
                      <i class="ri-html5-line me-2" />
                      Download as HTML
                    </button>
                  </li>
                  <li>
                    <button class="dropdown-item download-button" data-format="zip" type="button">
                      <i class="ri-file-zip-line me-2" />
                      Download as ZIP
                    </button>
                  </li>
                </ul>
              </div>
            )
          }
        </div>
      </div>

      <div class="visually-hidden">
        <div class="copy-html" data-code={htmlCode}></div>
        {cssCode && <div class="copy-css" data-code={cssCode} />}
        {jsCode && <div class="copy-js" data-code={jsCode} />}
      </div>

      <div class="code-preview-content tab-content">
        <div
          class="tab-pane fade show active"
          id={`${previewId}-html`}
          role="tabpanel"
          aria-labelledby="html-tab"
        >
          <div
            class="codemirror-editor-container"
            data-language="html"
            data-code={htmlCode}
            style="min-height: 150px; max-height: 450px;"
          >
          </div>
        </div>

        {
          cssCode && (
            <div
              class="tab-pane fade"
              id={`${previewId}-css`}
              role="tabpanel"
              aria-labelledby="css-tab"
            >
              <div
                class="codemirror-editor-container"
                data-language="css"
                data-code={cssCode}
                style="min-height: 150px; max-height: 450px;"
              />
            </div>
          )
        }

        {
          jsCode && (
            <div
              class="tab-pane fade"
              id={`${previewId}-js`}
              role="tabpanel"
              aria-labelledby="js-tab"
            >
              <div
                class="codemirror-editor-container"
                data-language="javascript"
                data-code={jsCode}
                style="min-height: 150px; max-height: 450px;"
              />
            </div>
          )
        }
      </div>
    </div>

    <div
      class="d-flex align-items-center justify-content-center border-top code-preview-header py-2"
    >
      <button
        type="button"
        class="btn btn-outline-secondary code-toggle-link py-1 w-50"
        aria-label="Toggle Code"
        aria-expanded="false"
      >
        <i class="ri-code-s-slash-line px-1"></i>
        <span>Show Code</span>
      </button>
    </div>
  </div>
</div>

{
  !disableModal && (
    <div
      class="modal fade preview-modal"
      data-toc-skip
      id={previewId}
      tabindex="-1"
      data-bg-color={bgColor.toString()}
      aria-labelledby={`${previewId}-label`}
      aria-hidden="true"
      {...(iframeSrc && { 'data-external-src': iframeSrc })}
    >
      <div
        class="modal-dialog modal-fullscreen-xl-down"
        style="max-width: 95vw; height: 95vh; margin: 1rem auto;"
      >
        <div class="modal-content border-0 h-100">
          <div
            class="modal-header py-2 d-grid bg-body-secondary border-bottom"
            style="grid-template-columns: 1fr auto 1fr;"
          >
            <span class="modal-title fs-6 mb-0 d-flex align-items-center" id={`${previewId}-label`}>
              {title}
            </span>

            <div class="d-flex justify-content-center">
              <PreviewDevices />
            </div>

            <div class="d-flex justify-content-end gap-2 align-items-center">
              <PreviewButton
                icon="ri-sun-line"
                title="Toggle Theme"
                className="theme-toggle me-2"
                extraAttributes={{
                  'data-current-theme': 'light',
                  ...(iframeSrc && { 'data-iframe-id': `iframe-modal-${previewId}` })
                }}
              />
              <PreviewButton
                icon="ri-close-line"
                title="Close"
                extraAttributes={{ 'data-bs-dismiss': 'modal' }}
              />
            </div>
          </div>
          <div
            class="modal-body h-100 p-0"
            style={`background-color: ${backgroundColor};`}
            data-bs-theme=""
          >
            <div
              class="preview-container rounded h-100 position-relative"
              style="width: 100%; transition: width 0.3s ease; overflow: hidden;"
            >
              <div class="iframe-loader">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </div>
              <iframe
                id={`iframe-modal-${previewId}`}
                class="preview-iframe"
                style="width: 100%; height: 100%; border: none;"
                {...(iframeSrc ? { src: iframeSrc } : { srcdoc: iframeContent })}
                title={`${title} (Modal View)`}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

<script is:inline define:vars={{ previewId, iframeSrc, bgColor }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Add keyboard shortcut hints to tooltips
    const editButton = document.querySelector(
      `#${previewId} .edit-button, .preview-box[data-modal="${previewId}"] .edit-button`
    )
    if (editButton) {
      const originalTitle = editButton.getAttribute('title')
      editButton.setAttribute('title', `${originalTitle} (Ctrl+Shift+E)`)
    }

    const resetButton = document.querySelector(
      `#${previewId} .reset-all-button, .preview-box[data-modal="${previewId}"] .reset-all-button`
    )
    if (resetButton) {
      const originalTitle = resetButton.getAttribute('title')
      resetButton.setAttribute('title', `${originalTitle} (Ctrl+Shift+R)`)
    }

    // Initialize theme based on component-specific theme or document theme as fallback
    const componentTheme = localStorage.getItem(`iframe-theme-${previewId}`)
    const siteTheme = document.documentElement.getAttribute('data-bs-theme') || 'light'
    const initialTheme = componentTheme || siteTheme

    // Apply theme to card-body and modal-body
    const cardBody = document.querySelector(`#${previewId}`)?.querySelector('.card-body')
    if (cardBody) {
      cardBody.setAttribute('data-bs-theme', initialTheme)
    }

    const modal = document.getElementById(previewId)
    if (modal) {
      const modalBody = modal.querySelector('.modal-body')
      if (modalBody) {
        modalBody.setAttribute('data-bs-theme', initialTheme)
      }
    }

    // Set the theme toggle initial state
    const themeToggle = document.querySelector(
      `#${previewId} .theme-toggle, .preview-box[data-modal="${previewId}"] .theme-toggle`
    )
    if (themeToggle) {
      themeToggle.dataset.currentTheme = initialTheme
      const icon = themeToggle.querySelector('i')
      if (icon) {
        if (initialTheme === 'dark') {
          icon.classList.remove('ri-sun-line')
          icon.classList.add('ri-moon-line')
          themeToggle.setAttribute('title', 'Switch to light theme')
        } else {
          icon.classList.remove('ri-moon-line')
          icon.classList.add('ri-sun-line')
          themeToggle.setAttribute('title', 'Switch to dark theme')
        }
      }

      // Listen for theme changes
      window.addEventListener('storage', (event) => {
        // Only listen for component-specific theme changes
        if (event.key === `iframe-theme-${previewId}`) {
          const newTheme = event.newValue || 'light'

          // Update all theme toggles for this preview
          const allToggles = document.querySelectorAll(
            `#${previewId} .theme-toggle, .preview-box[data-modal="${previewId}"] .theme-toggle`
          )
          allToggles.forEach((toggle) => {
            toggle.dataset.currentTheme = newTheme
            const toggleIcon = toggle.querySelector('i')
            if (toggleIcon) {
              if (newTheme === 'dark') {
                toggleIcon.classList.remove('ri-sun-line')
                toggleIcon.classList.add('ri-moon-line')
                toggle.setAttribute('title', 'Switch to light theme')
              } else {
                toggleIcon.classList.remove('ri-moon-line')
                toggleIcon.classList.add('ri-sun-line')
                toggle.setAttribute('title', 'Switch to dark theme')
              }
            }
          })

          // Find both preview box and modal and update them
          const previewBox = document.querySelector(`.preview-box[data-modal="${previewId}"]`)
          if (previewBox && typeof window.UIControlsManager !== 'undefined') {
            window.UIControlsManager.updateComponentTheme(previewBox, newTheme)
          }

          if (modal && typeof window.UIControlsManager !== 'undefined') {
            window.UIControlsManager.updateComponentTheme(modal, newTheme)
          }
        }
      })
    }

    // Ensure the iframe gets the correct background color when editing starts
    const previewBox = document.getElementById(previewId)
    if (previewBox) {
      // Set up an observer to watch for edit mode changes
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            const iframe = previewBox.querySelector('.preview-iframe')
            if (iframe && iframe.contentWindow) {
              try {
                iframe.contentWindow.postMessage(
                  {
                    type: 'updateContent',
                    bgColor: bgColor
                  },
                  '*'
                )
              } catch (e) {
                console.error('Error updating background color after edit mode change:', e)
              }
            }
          }
        })
      })

      // Start observing the edit button
      if (editButton) {
        observer.observe(editButton, { attributes: true, attributeFilter: ['class'] })
      }
    }
  })
</script>
